name: Terraform Custom Realm Batch Job

on: workflow_dispatch

env:
  TF_VERSION: 1.1.4
  KEYCLOAK_V2_DEV_URL: https://dev.sandbox.loginproxy.gov.bc.ca
  KEYCLOAK_V2_TEST_URL: https://test.sandbox.loginproxy.gov.bc.ca
  KEYCLOAK_V2_PROD_URL: https://sandbox.loginproxy.gov.bc.ca
  REALM_REGISTRY_API_URL: '{{ secrets.REALM_REGISTRY_API_URL }}'

jobs:
  terraform:
    runs-on: ubuntu-20.04
    steps:
    - uses: hmarr/debug-action@v2
    - uses: actions/checkout@v2

    - name: Fetch Requests Count
      id: requests
      uses: fjogeleit/http-request-action@master
      with:
        url: '{{ env.REALM_REGISTRY_API_URL }}/realms/pending'
        method: GET
        customHeaders: '{"Authorization": "${{ secrets.REALM_REGISTRY_GH_API_TOKEN }}"}'
        timeout: '60000'

    - name: Get Requests Count
      id: count
      run: |
        count=$(jq length <<< ${{ steps.requests.outputs.response }})
        echo "$count"
        echo "count=$count" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      if: steps.count.outputs.count != '0'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format
      id: fmt
      if: steps.count.outputs.count != '0'
      run: terraform fmt -check
      working-directory: ./terraform-v2-custom

    - name: Terraform Variables
      if: steps.count.outputs.count != '0'
      run: |
        cat >"config.tf" <<EOF
        terraform {
          backend "s3" {
            bucket = "xgr00q-dev-keycloak"
            key    = "keycloak/gold-custom"
            region = "ca-central-1"
            dynamodb_table = "xgr00q-dev-state-locking"
            access_key = "${{ secrets.TF_S3_ACCESS_KEY }}"
            secret_key = "${{ secrets.TF_S3_SECRET_KEY }}"
            role_arn   = "${{ secrets.TF_S3_ROLE_ARN }}"
          }
          required_providers {
            keycloak = {
              source  = "mrparkers/keycloak"
              version = "3.10.0"
            }
          }
        }
        EOF

        cat >"ci.auto.tfvars" <<EOF
        dev_keycloak_url="${{ env.KEYCLOAK_V2_DEV_URL }}"
        test_keycloak_url="${{ env.KEYCLOAK_V2_TEST_URL }}"
        prod_keycloak_url="${{ env.KEYCLOAK_V2_PROD_URL }}"
        dev_client_secret="${{ secrets.KEYCLOAK_V2_DEV_CLIENT_SECRET }}"
        test_client_secret="${{ secrets.KEYCLOAK_V2_TEST_CLIENT_SECRET }}"
        prod_client_secret="${{ secrets.KEYCLOAK_V2_PROD_CLIENT_SECRET }}"
        EOF
      working-directory: ./terraform-v2-custom

    - name: Terraform Init
      if: steps.count.outputs.count != '0'
      id: init
      run: terraform init -upgrade
      working-directory: ./terraform-v2-custom

    - name: Terraform Plan
      if: steps.count.outputs.count != '0'
      id: plan
      run: terraform plan -no-color
      working-directory: ./terraform-v2-custom
      continue-on-error: true

    - name: Truncate Terraform Plan
      if: steps.count.outputs.count != '0'
      run: |
        plan=$(tail -n 1000 <<'EOF'
        ${{ format('{0}', steps.plan.outputs.stdout) }}
        EOF
        )
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "${plan:0:65536}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - uses: actions/github-script@0.9.0
      if: steps.count.outputs.count != '0'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Update Realm Request TF Plan Status
      if: steps.count.outputs.count != '0'
      uses: fjogeleit/http-request-action@master
      with:
        url: '{{ env.REALM_REGISTRY_API_URL }}/realms/pending'
        method: PUT
        data: "{\"ids\": ${{ steps.requests.outputs.response }}, \"action\": \"tf_plan\", \"success\": \"${{ steps.plan.outcome != 'failure' }}\"}"
        customHeaders: '{"Authorization": "${{ secrets.REALM_REGISTRY_GH_API_TOKEN }}"}'
        timeout: '60000'

    - name: Terraform Plan Status
      if: steps.count.outputs.count != '0' && steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: steps.count.outputs.count != '0' && steps.plan.outcome != 'failure'
      id: apply
      run: terraform apply -auto-approve
      working-directory: ./terraform-v2-custom

    - name: Update Realm Request TF Apply Status
      if: steps.count.outputs.count != '0' && steps.apply.outcome != 'failure'
      uses: fjogeleit/http-request-action@master
      with:
        url: '{{ env.REALM_REGISTRY_API_URL }}/realms/pending'
        method: PUT
        data: "{\"ids\": ${{ steps.requests.outputs.response }}, \"action\": \"tf_apply\", \"success\": \"${{ steps.apply.outcome != 'failure' }}\"}"
        customHeaders: '{"Authorization": "${{ secrets.REALM_REGISTRY_GH_API_TOKEN }}"}'
        timeout: '60000'

    - name: Terraform Apply Status
      if: steps.count.outputs.count != '0' && steps.apply.outcome == 'failure'
      run: exit 1

    - uses: bcgov/sso-requests-actions/keycloak@v0.63.0
      if: github.event_name == 'push'
      with:
        dev-keycloak-url: ${{ env.KEYCLOAK_V2_DEV_URL }}
        test-keycloak-url: ${{ env.KEYCLOAK_V2_TEST_URL }}
        prod-keycloak-url: ${{ env.KEYCLOAK_V2_PROD_URL }}
        dev-client-secret: ${{ secrets.KEYCLOAK_V2_DEV_CLIENT_SECRET }}
        test-client-secret: ${{ secrets.KEYCLOAK_V2_TEST_CLIENT_SECRET }}
        prod-client-secret: ${{ secrets.KEYCLOAK_V2_PROD_CLIENT_SECRET }}
        tasks: create-master-viewer
